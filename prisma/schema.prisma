// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Base
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Specific
  name     String?
  email    String? @unique
  imageUrl String?
  googleId String  @unique

  // Relations
  createdCircles    Circle[]  @relation("circlesCreatedByUser")
  createdTopics     Topic[]   @relation("topicsCreatedByUser")
  circleMemberships Circle[]  @relation("circleMembershipsForUser")
  messages          Message[] @relation("messagesSentByUser")

  @@index([email])
  @@map(name: "users")
}

model Circle {
  // Base
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Specific
  name           String
  description    String?
  imageUrl       String?
  userId         String
  defaultTopicId String? @unique

  // Relations
  createdBy    User    @relation("circlesCreatedByUser", fields: [userId], references: [id])
  members      User[]  @relation("circleMembershipsForUser")
  topics       Topic[] @relation("topicsInCircle")
  defaultTopic Topic?  @relation("defaultTopicForCircle", fields: [defaultTopicId], references: [id])

  @@index([userId])
  @@map(name: "circles")
}

model Topic {
  // Base
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Specfic
  name        String
  description String?
  userId      String
  circleId    String

  // Relations
  createdBy        User      @relation("topicsCreatedByUser", fields: [userId], references: [id])
  parentCircle     Circle    @relation("topicsInCircle", fields: [circleId], references: [id])
  defaultForCircle Circle?   @relation("defaultTopicForCircle")
  messages         Message[] @relation("messagesInTopic")

  @@map(name: "topics")
}

model Message {
  // Base
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Specific 
  text           String?
  userId         String
  topicId        String
  highlightCount Int?     @default(0)

  // Relations
  sentBy User  @relation("messagesSentByUser", fields: [userId], references: [id])
  topic  Topic @relation("messagesInTopic", fields: [topicId], references: [id])

  @@map(name: "messages")
}
